{"meta":{"title":"Mongojane博客","subtitle":"作为一个怪兽，我的愿望是至少消灭一个奥特曼。","description":"业精于勤荒于嬉","author":"Yveda","url":"https://yveda.github.io"},"pages":[{"title":"404","date":"2018-04-27T09:00:37.000Z","updated":"2018-04-27T09:00:37.452Z","comments":true,"path":"404/index.html","permalink":"https://yveda.github.io/404/index.html","excerpt":"","text":""},{"title":"关于我","date":"2014-12-21T16:00:00.000Z","updated":"2018-04-29T08:24:52.586Z","comments":true,"path":"about/index.html","permalink":"https://yveda.github.io/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2014-12-21T16:00:00.000Z","updated":"2018-04-29T12:51:08.519Z","comments":true,"path":"categories/index.html","permalink":"https://yveda.github.io/categories/index.html","excerpt":"","text":""},{"title":"其他","date":"2014-12-21T16:00:00.000Z","updated":"2018-04-29T09:10:28.045Z","comments":true,"path":"other/index.html","permalink":"https://yveda.github.io/other/index.html","excerpt":"","text":""},{"title":"search","date":"2018-04-27T09:00:24.000Z","updated":"2018-04-27T09:00:24.831Z","comments":true,"path":"search/index.html","permalink":"https://yveda.github.io/search/index.html","excerpt":"","text":""},{"title":"tags","date":"2014-12-21T16:00:00.000Z","updated":"2018-04-28T17:30:35.936Z","comments":true,"path":"tags/index.html","permalink":"https://yveda.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"4月份总结","slug":"201804","date":"2018-04-28T13:51:29.000Z","updated":"2018-05-01T14:25:35.728Z","comments":true,"path":"2018/04/28/201804/","link":"","permalink":"https://yveda.github.io/2018/04/28/201804/","excerpt":"感想快毕业了意味着也快要找工作了，感慨万千。多学点东西，多点出路。","text":"感想快毕业了意味着也快要找工作了，感慨万千。多学点东西，多点出路。 完成了一个毕业设计《基于vue框架的web音乐app的设计与实现》4月9号 遇到了幸运女神加深node.js和vue的掌握展望 完善音乐移动端app Vue+Node+MongoDB项目 Vue TODO List 完善个人博客+腾讯云+gal主题","categories":[{"name":"blog","slug":"blog","permalink":"https://yveda.github.io/categories/blog/"}],"tags":[{"name":"月度总结","slug":"月度总结","permalink":"https://yveda.github.io/tags/月度总结/"}]},{"title":"Parcel新一代打包神器","slug":"parcel-新一代打包神器","date":"2018-01-01T13:51:29.000Z","updated":"2018-05-01T14:12:11.990Z","comments":true,"path":"2018/01/01/parcel-新一代打包神器/","link":"","permalink":"https://yveda.github.io/2018/01/01/parcel-新一代打包神器/","excerpt":"前言 前端未来的发展前景是全栈（结合java，php），而不是单纯前端的全栈 使用node.js能开发区块链 it发展很快，跳出循环看世界","text":"前言 前端未来的发展前景是全栈（结合java，php），而不是单纯前端的全栈 使用node.js能开发区块链 it发展很快，跳出循环看世界 短短五年时间跳了五个台阶，基本上一年一个新技术 2013-2018 pc端 - 移动端h5 - 大数据 - 人工智能 - 区块链 也就是IT(信息技术)向DT(数据技术)的转变 还有物联网 智能家居 人工智能 中控系统 数据可视化 parcel定义 官网 新一代web打包神器，适用于经验不同的开发者。它利用多核处理提供了极快的速度，并且不需要任何配置。跟webpack类似，webpack很复杂要配置很多东西，但是parcel是简化版本的webpack parcel的优点与缺点 优点 无需配置 极速打包 自动转换 内置了常见场景的构建方法及其依赖，无需再安装各种依赖 模块热替换 默认支持模块热替换，真正做到开箱即用 缺点 不支持SourceMap：在开发模式下，Parcel也不会输出SourceMap,目前只能去调试可读性极低的代码 不支持剔除无效代码（TreeShaking）;很多时候我们只用到了库中的一个函数，结果parcel把整个库都打包了进来 一些依赖会让Parcel出错；当你的项目依赖了一些npm上面的模块时，有些npm模块会让parcel出错误 使用Parcel的场景目前Parcel只能用来构建用于运行在浏览器中的网页，这也是他的出发点和专注点，在软件行业不可能既简单又可以简单适应各种场景的方案，就算所谓的人工智能也许会解决这个问题，但人工智能不能保证百分百的正确性。 如何安装npm包 全局安装：npm install -g 本地安装：npm install –save-dev (开发依赖) 首先通过 Yarn 或者 npm 安装 ParcelYarn: yarn global add parcel-bundler npm: npm install -g parcel-bundler 前端开发方式介绍： 传统开发方式： 需求分析-设计-编码-测试-运行-维护（类似串联） 特点：生产效率以及维护效率非常缓慢，得一个个去查找文件，去更改再上线。 现代化前端开发方式: 模块化 工程化 组件化 全栈化 特点：提高开发效率 开发/维护 阶段是非常有必要的 开发：面对复杂的js和html越来越多了，我们之前只能做到手动去引入依赖，如何让文件之间的关系 变得可依赖呢？或者让文件之间自动相关联。这就是所说的工程化，在这之前还要做到模块化（组件和模块的区别：区别在颗粒度方面，模块化可以理解为零件，比如轮胎上面的螺丝钉，组件就是轮胎）。 模块组件的核心思想针对开发和维护阶段的，管理复杂的js，html文件，然后构建依赖关系图。之后我们进行文件更改的时候，我们直接构件图，就可以直接进行定位。传统方式只有左边这一块没有右边这一块。 webpack使用打包，编译，开发环境应用是非常麻烦的，因为要借助很多插件，不管是引入插件还是入口出口都需要自己配置，那parcel就不需要用到配置文件了（webpack里面的配置文件是webpack.config.js） webpack和parccel打包速度对比parcel远远优于webpack parcel打包命令parcel 主文件入口比如说是 parcel index.html（全局安装可以用这个命令）如果不是全局安装使用这条命令就会出现’parcel’不是内部或者外部命令，也不是可运行或批处理文件。解决方法是建立一个package.json文件。 在你正在使用的项目目录下创建一个 package.json 文件 yarn init -y or npm init -y 在packjson.json文件里面配置打包命令：1234&quot;scripts&quot;: &#123; &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;, &quot;build&quot;: &quot;parcel index.html&quot;&#125;, 然后在根目录下面新建index.html文件和在app文件夹里面新建index.js文件，然后引入jsindex.html12345&lt;html&gt;&lt;body&gt; &lt;script src=&quot;./app/index.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; index.js 1console.log(&quot;hello world&quot;); 接下来整合html和js执行打包命令：npm run build 可以看见他创建了一个开发的服务器环境 真正部署的是dist文件夹下面的 dist文件夹 index.html：12345&lt;html&gt;&lt;body&gt; &lt;script src=&quot;/app.37d33215.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 打包的文件 1234567console.log(&quot;hello world&quot;);&#125;,&#123;&#125;],6:[function(require,module,exports) &#123;var OVERLAY_ID = &apos;__parcel__error__overlay__&apos;;var global = (1, eval)(&apos;this&apos;);var OldModule = module.bundle.Module; 后期怎么进行维护：就不需要像传统方式一样，一个个去找，只需要这个文件在什么地方，我们进行文件名的更改，然后再进行布局就行了。例如改下app/index.jsconsole.log(“welcome to see you”);然后index.html的控制台里面的数值也发生对应变化，专有名词解释叫模块热替换，就是我改变文件内容，前台会自动更新，不需要手动去刷新。 parcel的自动转化的特点：场景:js的代码兼容性处理，用es6能提高开发效率，但是es6的兼容不好，我们现在用babel-loader来处理es6的兼容性，babel-loader他是个预处理器，如果我们用webpack需要去下载babel-loader，并且还需呀去配置解析，但是用parcel就不需要。假设在index.js里面写个类，在es5里面没有类的概念。 index.js：1234567891011class Point&#123; constructor() &#123; this.name = &quot;yveda&quot; this.age = 18 &#125; go()&#123; console.log(`$&#123;this.name&#125;的年龄是$&#123;this.age&#125;岁`) &#125;&#125;const point = new Point()//实例化一下point.go()//执行一下 然后localhost:1234 的控制台里面显示的是：yveda的年龄是18岁 而且在app.37d33215.js里面：1234567891011121314151617//含有es5的代码，他改成了构造函数的类型 var Point = function () &#123; function Point() &#123; _classCallCheck(this, Point); this.name = &quot;yveda&quot;; this.age = 18; &#125; _createClass(Point, [&#123; key: &quot;go&quot;, value: function go() &#123; console.log(this.name + &quot;\\u7684\\u5E74\\u9F84\\u662F&quot; + this.age + &quot;\\u5C81&quot;); &#125; &#125;]); return Point;&#125;();//所以这个parcel非常强大的一点，不需要跟wepack一样去下载很多插件 再举个例子：123//在index.js后面添const arr = [1,2,3];console.log(...arr) 然后再次进行打包npm run build在里面app.37d33215.js找到如下 123var arr = [1, 2, 3];(_console = console).log.apply(_console, arr);&#125;,&#123;&#125;],4:[function(require,module,exports) &#123; 发现他把这个点转化成apply了，所以这就是parcel的自动转换，es6自动转换为es5 css的引入现在我们做组件和模块，很少把js和css引入当前的html当中，在组件化开发中，js和css一般都放在一起的，那怎么让两个之间相关联呢？如果使用webpack的话，需要一个css-loader，style-loader,还有要import css。 新建app/css/style.css:12345678910body&#123; margin:0; background: #008666; color: #000;&#125;.box&#123; width: 220px; height: 200px; border:3px solid red;&#125; 然后在index.js里面引入style.css添加一个块12345678910111213141516171819import &quot;../css/style.css&quot;; const oDiv = document.createElement(&apos;div&apos;); oDiv.className = &apos;box&apos;; document.body.appendChild(oDiv); class Point&#123; constructor() &#123; this.name = &quot;yveda&quot; this.age = 18 &#125; go()&#123; console.log(`$&#123;this.name&#125;的年龄是$&#123;this.age&#125;岁`) &#125; &#125; const point = new Point()//实例化一下 point.go()//执行一下 const arr = [1,2,3]; console.log(...arr) 进行打包 npm run build 进入控制台1234567&lt;html&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/style.aa408015.css&quot;&gt;&lt;script src=&quot;/style.aa408015.js&quot;&gt;&lt;/script&gt;&lt;body&gt; &lt;script src=&quot;/js.2a519707.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 右击/style.aa408015.css，选择open in new table，发现样式已经引入进来了 12345678910body&#123; margin:0; background: #333333; color: #000;&#125;.box&#123; width: 220px; height: 200px; border:3px solid red;&#125; 在新建一个app/js/app.js并将index.js里面的东西清空，将原先index.js里面的内容全部剪切到app.js里面然后将app.js导入到index.js里面 12import Print from &apos;./app.js&apos;;Print(); 总结 开发的问题 怎么提高开发效率(协同开发) 怎么降低维护难度 怎么解决？ 制定开发规范(腾讯开发规范) 模块化/组件化 部署 代码检查 压缩代码 增量更新 单元测试 怎么解决？构建(全部文件进行编译)和编译(单文件编译)，我用parcel和webpack这种就是构建 传统前端工程体系： 应用层：image，css，js等 server层：CDN，tpl，http…. QA层：集成测试 开发层：单元测试，image,js，sass,less,java,php,python… 数据层：DB 大前端 前端工程体系 应用层：image，css，js等 server层：CDN，tpl，http…. QA层：集成测试 开发层：前后端分离，使用node.js跟服务器端进行数据的交互。 数据层：DB 为什么现在大前端能做这些项目的构建打包，集成测试是因为有了node.js，他改变了前端，通过这个东西他跟后台，数据库做交互。","categories":[{"name":"前端打包工具","slug":"前端打包工具","permalink":"https://yveda.github.io/categories/前端打包工具/"}],"tags":[{"name":"Parcel","slug":"Parcel","permalink":"https://yveda.github.io/tags/Parcel/"}]},{"title":"hexo文件配置及主题","slug":"project3","date":"2017-12-09T15:51:29.000Z","updated":"2018-05-01T16:01:56.262Z","comments":true,"path":"2017/12/09/project3/","link":"","permalink":"https://yveda.github.io/2017/12/09/project3/","excerpt":"前言配置文件和Shana主题","text":"前言配置文件和Shana主题 设置头像 在站点配置文件中,添加avatar字段,值设置成头像的链接地址 12avatar: /images/avatar.png路径主题文件source/images目录下 设置网站图标(注意必须为ico格式) 在主题配置文件中,把favicon的注释去掉即可123# Put your favicon.ico into `hexo-site/source/` directory.favicon: images/favicon.ico//路径主题文件source/images目录下 自定义代码高亮 在hexo-theme-shana\\source\\css_partial\\highlight.styl12345678$code-block border-left: 5px solid #eb3c3c background: #9d margin: 0 article-padding * -1 padding: 15px article-padding overflow: auto color: highlight-foreground line-height: font-size * line-height 自定义背景图片12hexo-theme-shana\\source\\plugin\\bganimation\\bg.css替换里面的图片url就可以了 hexo设置网站的图标Favicon1234具体方法实现:ico图标 32*32 去别的网站下载或者制作，并将图标名称改为 favicon.ico，然后把图标放在/themes/next/source/images里，并且修改主题配置文件：favicon: images/favicon.ico//路径主题文件source/images目录下 文章打赏功能 越来越多的平台（微信公众平台，新浪微博，简书，百度打赏等）支持打赏功能，付费阅读时代越来越近，Next特此增加了打赏功能，支持微信打赏和支付宝打赏。 只需要复制下面的代码添加到主题配置文件中即可开启该功能。 123reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！wechatpay: 图片链接alipay: 图片链接 设置友情链接 在主题文件开启links_title和links即可 1234567titlelinks_title: 前端工具箱links_layout: blocklinks_layout: inlinelinks: 代码压缩: http://tool.oschina.net/jscompress CSS整理: http://example 添加标签页面 使用： hexo new page tags 新建一个 标签页面（或者直接在文件夹里面新建一个tags文件夹里面包含一个index.md） 主题的 _config.yml 文件中的 menu 中进行匹配 123456menu: home: / //主页 categories: /categories //分类 archives: /archives //归档 tags: /tags //标签 （添加此行即可） about: /about //关于 底下代码是一篇包含 标签 文章的例子： 1234title: 标签测试tags: - Testing （这个就是文章的标签了） - Another Tag （这个就是文章的标签了） tags文件夹里面是index.md 123456---title: tagsdate: 2014-12-22 type: &quot;tags&quot;layout: &quot;tags&quot;--- 添加 分类页面 使用： hexo new page categories 新建一个 分类 页面。 主题的 _config.yml 文件中的 menu 中进行匹配 123456menu: home: / //主页 categories: /categories //分类 （添加此行即可） archives: /archives //归档 tags: /tags //标签 about: /about //关于 底下代码是一篇包含 分类 文章的例子： 123title: 分类测试categories:- hexo （这个就是文章的分类了） categories文件夹里面是index.md 123456---title: 分类date: 2014-12-22type: &quot;categories&quot;layout: &quot;categories&quot;--- hexo categories和tags页面不显示解决办法方法一： scaffolds/draft.md 1234---title: &#123;&#123; title &#125;&#125;tags: &#123;&#123; tags &#125;&#125;--- scaffolds/post.md 12345---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags: &#123;&#123; tags &#125;&#125;--- tags/index 123456---title: Tagclouddate: 2017-04-26 17:47:43type: &quot;tags&quot;layout: &quot;tags&quot;--- 方法二： 1.默认是没有 categories 和 tags 的需要 123hexo new page &quot;tags&quot; hexo new page &quot;categories&quot; 2.编辑 /tags/index.md /categories/index.md 123456type: &quot;tags&quot;layout: &quot;tags&quot;type: &quot;categories&quot;layout: &quot;categories&quot; 修改底部logo找到 \\themes\\next\\layout_partials\\下面的footer.swig文件","categories":[{"name":"blog","slug":"blog","permalink":"https://yveda.github.io/categories/blog/"}],"tags":[{"name":"心得","slug":"心得","permalink":"https://yveda.github.io/tags/心得/"}]},{"title":"用hexo搭建博客","slug":"project2","date":"2017-12-08T14:51:29.000Z","updated":"2018-04-28T16:28:44.618Z","comments":true,"path":"2017/12/08/project2/","link":"","permalink":"https://yveda.github.io/2017/12/08/project2/","excerpt":"前言12搭建一个博客感觉很酷很炫，本着这个心理我就想创建一个个人博客。hexo官网：https://hexo.io/zh-cn/","text":"前言12搭建一个博客感觉很酷很炫，本着这个心理我就想创建一个个人博客。hexo官网：https://hexo.io/zh-cn/ 安装git，node.js安装hexo123456安装前先介绍几个hexo常用的命令,#后面为注释。1.$ hexo g #完整命令为hexo generate，用于生成静态文件2.$ hexo s #完整命令为hexo server，用于启动服务器，主要用来本地预览3.$ hexo d #完整命令为hexo deploy，用于将本地文件发布到github上4.$ hexo n #完整命令为hexo new，用于新建一篇文章5.$hexo new page &quot;pageName&quot; ,新建页面 安装脚手架12鼠标右键任意地方，选择Git Bash，使用以下命令安装hexo$ npm install hexo-cli -g 如果之后在使用的过程中，遇到以下的错误1ERROR Deployer not found : github 则运行以下命令,或者你直接先运行这个命令更好。1$ npm install hexo-deployer-git --save 创建放置博客的文件夹：D:\\HEXO 记得备份，点击鼠标右键，选择Git Bash，执行以下命令，Hexo会自动在该文件夹下下载搭建网站所需的所有文件。1$ hexo init 安装依赖包1$ npm install 看看刚刚下载的HEXO文件带来了什么，在D:\\HEXO内执行以下命令:12$ hexo g$ hexo s 然后用浏览器访问http://localhost:4000/，会看到一个漂亮的博客了，当然这个博客只是在本地的，别人是看不到的，hexo3.0使用的默认主题是landscape。轻轻松松就看到了一点成果，是不是很激动，这就是hexo的强大之处，这个本地预览的功能，我真是爱不释手。接下来在github里面创建一个仓库1仓库名字格式为youname.github.io,例如我的叫Yveda.github.io，注意：此处的youname必须为你的github用户名，用户名是可以用来登陆的。 部署本地文件到github既然Repository已经创建了，当然是先把博客放到Github上去看看效果。编辑D：\\hexo下的_config.yml文件。在_config.yml最下方，添加如下配置(命令中的第一个Yveda为Github的用户名,第二Yveda为之前New的Repository的名字,记得改成自己的。另外记得一点，hexo的配置文件中任何’:’后面都是带一个空格的),如果配置以下命令出现ERROR Deployer not found : github，则参考上文的解决方法。1234deploy: type: git repository: http://github.com/Yveda/Yvead.github.io.git branch: master 配置好_config.yml并保存后，执行以下命令部署到Github上。如果你是第一次使用Github或者是已经使用过，但没有配置过SSH，则可能需要配置一下，本文的另一种发布到github的配置一节有介绍。12$ hexo g$ hexo d 执行上面的第二个命令，可能会要你输入用户名和密码，皆为注册Github时的数据，输入密码是不显示任何东西的，输入完毕回车即可。此时，我们的博客已经搭建起来，并发布到Github上了，这时可以登陆自己的Github查看代码是否已经推送到对应Repository，在浏览器访问Yveda.github.io就能看到自己的博客了。第一次访问地址，可能访问不了，您可以在几分钟后进行访问，一般不超过10分钟。hexo的配置文件hexo里面有两个常用到的配置文件，分别是整个博客的配置文件D:\\HEXO_config.yml和主题的配置文件D:\\HEXO\\themes\\light_config.yml，此地址是对于我来说，hexo3.0使用的默认主题是landscape，因此你们的地址应该是D:\\HEXO\\themes\\landscape_config.yml，下文所有讲到light的地方，你们将之换为自己的主题名即可。本博客使用的主题是基于light改善的主题，目前还在完善中，如果完成的比较好，以后可能发布在github上。如果你想自己挑选喜欢的主题，hexo官方提供了12个主题供你自己选择，使用方法很简单，点击自己想要的主题，进入该主题的Repository，使用Git将主题clone到本地，然后将整个文件夹复制到D:\\HEXO\\themes文件夹下，将D:\\HEXO_config.yml里的theme名字改为自己下载的主题的文件夹名即可。Hexo配置文件详细说明D:\\HEXO_config.yml网站1234567参数 描述title 网站标题subtitle 网站副标题description 网站描述author 您的名字language 网站使用的语言timezone 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。网址12345参数 描述 默认值url 网址 root 网站根目录 permalink 文章的永久链接格式 :year/:month/:day/:title/permalink_defaults 永久链接中各部分的默认值 目录123456789参数 描述 source_dir 资源文件夹，这个文件夹用来存放内容。 public_dir 公共文件夹，这个文件夹用于存放生成的站点文件。 tag_dir 标签文件夹 archive_dir 归档文件夹，按年份category_dir 分类文件夹，按标签code_dir Include code 文件夹 i18n_dir 国际化（i18n）文件夹 skip_render 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 文章123456789101112参数 描述 new_post_name 新文章的文件名称 default_layout 预设布局 auto_spacing 在中文和英文之间加入空格 titlecase 把标题转换为 title case external_link 在新标签中打开链接 filename_case 把文件名称转换为 (1) 小写或 (2) 大写 render_drafts 显示草稿 post_asset_folder 启动 Asset 文件夹 relative_link 把链接改为与根目录的相对位址 future 显示未来的文章 highlight 代码块的设置 分类&amp;标签1234参数 描述 默认值default_category 默认分类 uncategorizedcategory_map 分类别名 tag_map 标签别名 时间/日期格式1时间/日期格式 分页123参数 描述 默认值per_page 每页显示的文章量 (0 = 关闭分页功能) 10pagination_dir 分页目录 page 扩展123参数 描述theme 当前主题名称。值为false时禁用主题deploy 部署部分的设置 按照自己的意愿修改完后，执行hexo g，hexo s，打开localhost:4000看看效果。发表一篇文章1.在Git Bash执行命令：$ hexo new “my new post”2.在D:\\HEXO\\source_post中打开my-new-post.md，打开方式使用记事本或subline vscode。hexo中写文章使用的是Markdown，没接触过的可以看下Markdown语法说明,一分钟学会Markdown1234567title: my new post #可以改成中文的，如“新文章”date: 2015-04-08 22:56:29 #发表日期，一般不改动categories: blog #文章文类tags: [博客，文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog---#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上&lt;!--more--&gt;#在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。 写完文章后，你可以使用1231.$ hexo g生成静态文件。2.$ hexo s在本地预览效果。3.hexo d同步到github，然后使用http://Yveda.github.io进行访问。 删除一篇文章在D:\\HEXO\\source_post 删除想要删除的文件，然后再执行hexo g,hexo d清除缓存清除缓存文件db.json和已生成的静态文件public。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。1$ hexo clean 总结第一次使用的主题是black-blue，动漫主题，感觉很酷，但是还想换个更酷炫的gal","categories":[{"name":"blog","slug":"blog","permalink":"https://yveda.github.io/categories/blog/"}],"tags":[{"name":"心得","slug":"心得","permalink":"https://yveda.github.io/tags/心得/"}]}]}